@model List<WebApp.Web.Models.CartItem>
@{
    ViewData["Title"] = "עגלת קניות";
}

<div class="container mt-4">
    <h2>עגלת קניות</h2>
    <div id="cartItems">
        <!-- Cart items will be loaded here -->
    </div>
    <div class="text-left mt-4">
        <h4>סה"כ: <span id="cartTotal">0</span> ₪</h4>
        <button class="btn btn-primary" onclick="proceedToCheckout()">המשך לתשלום</button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            loadCart();
        });

        function loadCart() {
            const cart = JSON.parse(localStorage.getItem('cart') || '[]');
            const cartItemsDiv = document.getElementById('cartItems');
            const cartTotalSpan = document.getElementById('cartTotal');
            
            if (cart.length === 0) {
                cartItemsDiv.innerHTML = '<p>העגלה ריקה</p>';
                cartTotalSpan.textContent = '0';
                return;
            }

            let total = 0;
            let html = '<div class="cart-items">';
            
            cart.forEach(item => {
                const itemTotal = item.product.price * item.quantity;
                total += itemTotal;
                
                html += `
                    <div class="cart-item card mb-3">
                        <div class="row g-0">
                            <div class="col-md-2">
                                <img src="${item.product.imageUrl}" class="img-fluid rounded-start" alt="${item.product.name}">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">${item.product.name}</h5>
                                    <p class="card-text">
                                        מחיר: $${item.product.price.toFixed(2)} / ₪${(item.product.price * 3.7).toFixed(0)}
                                    </p>
                                    <div class="quantity-controls">
                                        <button class="btn btn-sm btn-secondary" onclick="updateQuantity(${item.productId}, ${item.quantity - 1})">-</button>
                                        <span class="mx-2">${item.quantity}</span>
                                        <button class="btn btn-sm btn-secondary" onclick="updateQuantity(${item.productId}, ${item.quantity + 1})">+</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2 d-flex align-items-center justify-content-center">
                                <button class="btn btn-danger" onclick="removeFromCart(${item.productId})">הסר</button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            cartItemsDiv.innerHTML = html;
            cartTotalSpan.textContent = (total * 3.7).toFixed(0);
        }

        function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) {
                removeFromCart(productId);
                return;
            }

            const cart = JSON.parse(localStorage.getItem('cart') || '[]');
            const item = cart.find(item => item.productId === productId);
            
            if (item) {
                item.quantity = newQuantity;
                localStorage.setItem('cart', JSON.stringify(cart));
                
                // Update display
                loadCart();
                
                // Update cart count
                const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
                updateStoredCartCount(totalItems);

                // Try to sync with server
                try {
                    fetch('https://localhost:7001/api/cart', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            productId: productId,
                            quantity: newQuantity
                        })
                    });
                } catch (error) {
                    console.log('Could not sync with server, but cart was updated locally');
                }
            }
        }

        function removeFromCart(productId) {
            const cart = JSON.parse(localStorage.getItem('cart') || '[]');
            const updatedCart = cart.filter(item => item.productId !== productId);
            localStorage.setItem('cart', JSON.stringify(updatedCart));
            
            // Update display
            loadCart();
            
            // Update cart count
            const totalItems = updatedCart.reduce((sum, item) => sum + item.quantity, 0);
            updateStoredCartCount(totalItems);

            // Try to sync with server
            try {
                fetch('https://localhost:7001/api/cart', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId
                    })
                });
            } catch (error) {
                console.log('Could not sync with server, but cart was updated locally');
            }
        }

        function proceedToCheckout() {
            window.location.href = '/Home/Checkout';
        }
    </script>

    <style>
        .cart-item {
            border: 1px solid #ddd;
            margin-bottom: 1rem;
        }

        .cart-item img {
            max-height: 150px;
            object-fit: cover;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            margin-top: 1rem;
        }

        .quantity-controls button {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
        }
    </style>
} 