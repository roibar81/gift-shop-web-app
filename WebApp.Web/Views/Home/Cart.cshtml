@model IEnumerable<WebApp.Web.Models.CartItem>
@{
    ViewData["Title"] = "Shopping Cart";
    var totalAmount = Model.Sum(i => (i.Product?.Price ?? 0) * i.Quantity);
    var itemCount = Model.Sum(i => i.Quantity);
}

<div class="container-fluid mt-4 px-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">Shopping Cart</h2>
                <span class="text-muted" id="itemCount">@itemCount items</span>
            </div>

            @if (!Model.Any())
            {
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-cart text-muted" style="font-size: 3rem;"></i>
                        <h3 class="mt-3">Your cart is empty</h3>
                        <p class="text-muted">Looks like you haven't added anything to your cart yet.</p>
                        <a href="/" class="btn btn-primary">Start Shopping</a>
                    </div>
                </div>
            }
            else
            {
                <div class="card shadow-sm mb-4" id="cartItems">
                    <div class="card-header bg-white">
                        <h4 class="mb-0">Order Summary</h4>
                    </div>
                    <div class="card-body">
                        @foreach (var item in Model)
                        {
                            <div class="row align-items-center mb-3 pb-3 border-bottom" id="item-@item.ProductId">
                                <div class="col-md-2">
                                    <img src="@item.Product?.ImageUrl" class="img-fluid rounded" alt="@item.Product?.Name">
                                </div>
                                <div class="col-md-4">
                                    <h5 class="card-title mb-1">@item.Product?.Name</h5>
                                    <p class="text-muted mb-0">@item.Product?.Category</p>
                                    <small class="text-muted">@item.Product?.Description</small>
                                </div>
                                <div class="col-md-2">
                                    <div class="input-group input-group-sm" style="max-width: 120px;">
                                        <button class="btn btn-outline-primary update-quantity" 
                                                data-product-id="@item.ProductId" 
                                                data-action="decrease">
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <input type="text" class="form-control text-center quantity-input" 
                                               value="@item.Quantity" readonly>
                                        <button class="btn btn-outline-primary update-quantity" 
                                                data-product-id="@item.ProductId" 
                                                data-action="increase">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="col-md-2 text-end">
                                    <h5 class="mb-0">₪@((item.Product?.Price ?? 0).ToString("0.00"))</h5>
                                    <small class="text-muted">per item</small>
                                </div>
                                <div class="col-md-2 text-end">
                                    <h5 class="text-primary mb-2 item-total" data-product-id="@item.ProductId">
                                        ₪@(((item.Product?.Price ?? 0) * item.Quantity).ToString("0.00"))
                                    </h5>
                                    <button class="btn btn-outline-danger btn-sm remove-item" 
                                            data-product-id="@item.ProductId">
                                        <i class="bi bi-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        @if (Model.Any())
        {
            <div class="col-lg-4">
                <div class="card shadow-sm position-sticky" style="top: 2rem;">
                    <div class="card-header bg-white">
                        <h4 class="mb-0">Payment Details</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <h5 class="mb-3">Payment Method</h5>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="visa" value="visa" checked>
                                <label class="form-check-label" for="visa">
                                    <i class="bi bi-credit-card me-2"></i>Visa
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="isracard" value="isracard">
                                <label class="form-check-label" for="isracard">
                                    <i class="bi bi-credit-card me-2"></i>Isracard
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentMethod" id="paypal" value="paypal">
                                <label class="form-check-label" for="paypal">
                                    <i class="bi bi-paypal me-2"></i>PayPal
                                </label>
                            </div>
                        </div>

                        <div class="mb-4">
                            <h5 class="mb-3">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal (<span id="summaryItemCount">@itemCount</span> items)</span>
                                <span id="subtotal">₪@(totalAmount.ToString("0.00"))</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Shipping</span>
                                <span class="text-success">Free</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Tax (17% VAT)</span>
                                <span id="tax">₪@((totalAmount * 0.17m).ToString("0.00"))</span>
                            </div>
                        </div>

                        <hr>

                        <div class="d-flex justify-content-between mb-4">
                            <strong>Total Amount</strong>
                            <h4 class="text-primary mb-0" id="totalAmount">₪@((totalAmount * 1.17m).ToString("0.00"))</h4>
                        </div>

                        <button class="btn btn-primary w-100 mb-3" id="checkoutButton">
                            Proceed to Checkout
                        </button>

                        <a href="/" class="btn btn-outline-secondary w-100">
                            Continue Shopping
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateCartDisplay(cartCount, newTotal) {
            // Update item count
            document.getElementById('itemCount').textContent = `${cartCount} items`;
            document.getElementById('summaryItemCount').textContent = cartCount;
            
            // Update totals
            const subtotal = newTotal;
            const tax = subtotal * 0.17;
            const total = subtotal * 1.17;
            
            document.getElementById('subtotal').textContent = `₪${subtotal.toFixed(2)}`;
            document.getElementById('tax').textContent = `₪${tax.toFixed(2)}`;
            document.getElementById('totalAmount').textContent = `₪${total.toFixed(2)}`;
            
            // If cart is empty, reload page to show empty cart message
            if (cartCount === 0) {
                window.location.reload();
            }
        }

        // Handle quantity updates
        document.querySelectorAll('.update-quantity').forEach(button => {
            button.addEventListener('click', async () => {
                const productId = parseInt(button.getAttribute('data-product-id'));
                const action = button.getAttribute('data-action');
                const quantityInput = button.parentElement.querySelector('.quantity-input');
                let newQuantity = parseInt(quantityInput.value);
                
                if (action === 'increase') {
                    newQuantity++;
                } else if (action === 'decrease' && newQuantity > 1) {
                    newQuantity--;
                }
                
                try {
                    button.disabled = true;
                    const response = await fetch('/Home/UpdateCartQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, quantity: newQuantity })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        quantityInput.value = newQuantity;
                        updateCartDisplay(result.cartCount, result.newTotal);
                        
                        // Update item total
                        const itemPrice = parseFloat(button.closest('.row').querySelector('h5.mb-0').textContent.replace('₪', ''));
                        const itemTotal = itemPrice * newQuantity;
                        button.closest('.row').querySelector('.item-total').textContent = `₪${itemTotal.toFixed(2)}`;
                    } else {
                        throw new Error(result.message || 'Failed to update quantity');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'Failed to update quantity. Please try again.');
                } finally {
                    button.disabled = false;
                }
            });
        });
        
        // Handle item removal
        document.querySelectorAll('.remove-item').forEach(button => {
            button.addEventListener('click', async () => {
                if (!confirm('Are you sure you want to remove this item?')) {
                    return;
                }
                
                const productId = parseInt(button.getAttribute('data-product-id'));
                
                try {
                    button.disabled = true;
                    const response = await fetch('/Home/RemoveFromCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        // Remove item from display
                        document.getElementById(`item-${productId}`).remove();
                        updateCartDisplay(result.cartCount, result.newTotal);
                    } else {
                        throw new Error(result.message || 'Failed to remove item');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert(error.message || 'Failed to remove item. Please try again.');
                } finally {
                    button.disabled = false;
                }
            });
        });

        // Handle checkout button
        document.getElementById('checkoutButton').addEventListener('click', () => {
            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked').value;
            window.location.href = `/Home/Checkout?paymentMethod=${selectedPayment}`;
        });
    </script>
} 